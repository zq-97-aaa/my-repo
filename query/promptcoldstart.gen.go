// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"helloworld/model"
)

func newPromptColdStart(db *gorm.DB, opts ...gen.DOOption) promptColdStart {
	_promptColdStart := promptColdStart{}

	_promptColdStart.promptColdStartDo.UseDB(db, opts...)
	_promptColdStart.promptColdStartDo.UseModel(&model.PromptColdStart{})

	tableName := _promptColdStart.promptColdStartDo.TableName()
	_promptColdStart.ALL = field.NewAsterisk(tableName)
	_promptColdStart.ID = field.NewString(tableName, "id")
	_promptColdStart.PromptID = field.NewString(tableName, "promptId")
	_promptColdStart.Source = field.NewString(tableName, "source")
	_promptColdStart.CreatedAt = field.NewTime(tableName, "createdAt")
	_promptColdStart.Impression = field.NewInt32(tableName, "impression")
	_promptColdStart.Status = field.NewInt32(tableName, "status")
	_promptColdStart.ExitedAt = field.NewTime(tableName, "exitedAt")

	_promptColdStart.fillFieldMap()

	return _promptColdStart
}

type promptColdStart struct {
	promptColdStartDo

	ALL        field.Asterisk
	ID         field.String
	PromptID   field.String
	Source     field.String
	CreatedAt  field.Time
	Impression field.Int32
	Status     field.Int32
	ExitedAt   field.Time

	fieldMap map[string]field.Expr
}

func (p promptColdStart) Table(newTableName string) *promptColdStart {
	p.promptColdStartDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promptColdStart) As(alias string) *promptColdStart {
	p.promptColdStartDo.DO = *(p.promptColdStartDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promptColdStart) updateTableName(table string) *promptColdStart {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.PromptID = field.NewString(table, "promptId")
	p.Source = field.NewString(table, "source")
	p.CreatedAt = field.NewTime(table, "createdAt")
	p.Impression = field.NewInt32(table, "impression")
	p.Status = field.NewInt32(table, "status")
	p.ExitedAt = field.NewTime(table, "exitedAt")

	p.fillFieldMap()

	return p
}

func (p *promptColdStart) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promptColdStart) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["promptId"] = p.PromptID
	p.fieldMap["source"] = p.Source
	p.fieldMap["createdAt"] = p.CreatedAt
	p.fieldMap["impression"] = p.Impression
	p.fieldMap["status"] = p.Status
	p.fieldMap["exitedAt"] = p.ExitedAt
}

func (p promptColdStart) clone(db *gorm.DB) promptColdStart {
	p.promptColdStartDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promptColdStart) replaceDB(db *gorm.DB) promptColdStart {
	p.promptColdStartDo.ReplaceDB(db)
	return p
}

type promptColdStartDo struct{ gen.DO }

func (p promptColdStartDo) Debug() *promptColdStartDo {
	return p.withDO(p.DO.Debug())
}

func (p promptColdStartDo) WithContext(ctx context.Context) *promptColdStartDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promptColdStartDo) ReadDB() *promptColdStartDo {
	return p.Clauses(dbresolver.Read)
}

func (p promptColdStartDo) WriteDB() *promptColdStartDo {
	return p.Clauses(dbresolver.Write)
}

func (p promptColdStartDo) Session(config *gorm.Session) *promptColdStartDo {
	return p.withDO(p.DO.Session(config))
}

func (p promptColdStartDo) Clauses(conds ...clause.Expression) *promptColdStartDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promptColdStartDo) Returning(value interface{}, columns ...string) *promptColdStartDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promptColdStartDo) Not(conds ...gen.Condition) *promptColdStartDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promptColdStartDo) Or(conds ...gen.Condition) *promptColdStartDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promptColdStartDo) Select(conds ...field.Expr) *promptColdStartDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promptColdStartDo) Where(conds ...gen.Condition) *promptColdStartDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promptColdStartDo) Order(conds ...field.Expr) *promptColdStartDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promptColdStartDo) Distinct(cols ...field.Expr) *promptColdStartDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promptColdStartDo) Omit(cols ...field.Expr) *promptColdStartDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promptColdStartDo) Join(table schema.Tabler, on ...field.Expr) *promptColdStartDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promptColdStartDo) LeftJoin(table schema.Tabler, on ...field.Expr) *promptColdStartDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promptColdStartDo) RightJoin(table schema.Tabler, on ...field.Expr) *promptColdStartDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promptColdStartDo) Group(cols ...field.Expr) *promptColdStartDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promptColdStartDo) Having(conds ...gen.Condition) *promptColdStartDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promptColdStartDo) Limit(limit int) *promptColdStartDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promptColdStartDo) Offset(offset int) *promptColdStartDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promptColdStartDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *promptColdStartDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promptColdStartDo) Unscoped() *promptColdStartDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promptColdStartDo) Create(values ...*model.PromptColdStart) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promptColdStartDo) CreateInBatches(values []*model.PromptColdStart, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promptColdStartDo) Save(values ...*model.PromptColdStart) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promptColdStartDo) First() (*model.PromptColdStart, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptColdStart), nil
	}
}

func (p promptColdStartDo) Take() (*model.PromptColdStart, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptColdStart), nil
	}
}

func (p promptColdStartDo) Last() (*model.PromptColdStart, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptColdStart), nil
	}
}

func (p promptColdStartDo) Find() ([]*model.PromptColdStart, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromptColdStart), err
}

func (p promptColdStartDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptColdStart, err error) {
	buf := make([]*model.PromptColdStart, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promptColdStartDo) FindInBatches(result *[]*model.PromptColdStart, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promptColdStartDo) Attrs(attrs ...field.AssignExpr) *promptColdStartDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promptColdStartDo) Assign(attrs ...field.AssignExpr) *promptColdStartDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promptColdStartDo) Joins(fields ...field.RelationField) *promptColdStartDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promptColdStartDo) Preload(fields ...field.RelationField) *promptColdStartDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promptColdStartDo) FirstOrInit() (*model.PromptColdStart, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptColdStart), nil
	}
}

func (p promptColdStartDo) FirstOrCreate() (*model.PromptColdStart, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptColdStart), nil
	}
}

func (p promptColdStartDo) FindByPage(offset int, limit int) (result []*model.PromptColdStart, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promptColdStartDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promptColdStartDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promptColdStartDo) Delete(models ...*model.PromptColdStart) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promptColdStartDo) withDO(do gen.Dao) *promptColdStartDo {
	p.DO = *do.(*gen.DO)
	return p
}
